{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","authorizeEndpoint","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","newPlaylistTracks","push","filter","trackUris","a","newSearchResults","onload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1cb4ae5.chunk.js","sourcesContent":["const clientId = '2440db0c6fd64a218ccdfa355378748a';\r\nconst redirectUri = 'http://localhost:3000/callback/';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        }\r\n\r\n        else {\r\n            const authorizeEndpoint = `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientId}&redirect_uri=${redirectUri}&scope=playlist-modify-public`;\r\n            window.location = authorizeEndpoint;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {headers: {Authorization: `Bearer ${accessToken}`}})\r\n        .then(response => response.json())\r\n        .then(jsonResponse => {\r\n            const tracks = jsonResponse.tracks;\r\n            if (!tracks) {\r\n                return [];\r\n            }\r\n            else {\r\n                return tracks.items.map(track => {\r\n                    return {\r\n                        id: track.id,\r\n                        name: track.name,\r\n                        artist: track.artists[0].name,\r\n                        album: track.album.name,\r\n                        uri: track.uri\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    },\r\n\r\n    async savePlaylist(name, trackURIs) {\r\n        if (!name || !trackURIs.length) {\r\n            return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {Authorization: `Bearer ${accessToken}`};\r\n        const userId = await fetch('https://api.spotify.com/v1/me', {headers: headers}).then(response => response.json()).then(jsonResponse => jsonResponse.id);\r\n        const playlistId = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: JSON.stringify({name: name})\r\n        }).then(response => response.json()).then(jsonResponse => jsonResponse.id);\r\n        await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\r\n            method: 'POST',\r\n            headers: {Authorization: `Bearer ${accessToken}`, 'Content-Type': 'application/json'},\r\n            body: JSON.stringify({uris: trackURIs})\r\n        });\r\n    }\r\n};\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: 'search_term'\r\n        };\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n                <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }\r\n        else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {this.props.tracks.map(track => {\r\n                    return (\r\n                        <Track\r\n                        key={track.id}\r\n                        track={track}\r\n                        onAdd={this.props.onAdd}\r\n                        onRemove={this.props.onRemove}\r\n                        isRemoval={this.props.isRemoval}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\r\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  \n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    const newPlaylistTracks = this.state.playlistTracks;\n    newPlaylistTracks.push(track);\n    this.setState({playlistTracks: newPlaylistTracks});\n  }\n\n  removeTrack(track) {\n    const newPlaylistTracks = this.state.playlistTracks.filter(savedTrack => savedTrack.id !== track.id);\n    this.setState({playlistTracks: newPlaylistTracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  async search(term) {\n    const newSearchResults = await Spotify.search(term);\n    this.setState({searchResults: newSearchResults});\n  }\n\n  componentDidMount() {\n    window.onload = () => Spotify.getAccessToken();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist\n            playlistName={this.state.playlistName}\n            playlistTracks={this.state.playlistTracks}\n            onRemove={this.removeTrack}\n            onNameChange={this.updatePlaylistName}\n            onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}